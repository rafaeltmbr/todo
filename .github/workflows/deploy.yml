name: "Deploy process"

on:
  push:
    branches:
      - master

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Get source code
        uses: actions/checkout@v2

      - name: Copy scripts to remote server
        uses: ./.github/actions/rsync
        with:
          user: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_KEY }}
          source: production/scripts
          destination: ~/

      - name: Install dependencies if necessary
        uses: ./.github/actions/ssh
        with:
          user: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_KEY }}
          commands: |
            cd ~/scripts

            echo false > .install_docker

            which docker || INSTALL_DOCKER=true

            # install docker if necessary
            [[ "$INSTALL_DOCKER" == "true" ]] && sudo ./install-docker.sh

            # install docker-compose if necessary
            which docker-compose || sudo ./install-docker-compose.sh

            # reboot the machine if necessary
            if [[ "$INSTALL_DOCKER" == "true" ]]; then
              echo true > .install_docker
              echo "rebooting the machine to complete the docker installation";
              sudo reboot;
            fi

      - name: Copy .install_docker file from remote server
        uses: ./.github/actions/rsync
        with:
          user: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_KEY }}
          source: ~/production/scripts/.install_docker
          destination: ~/production/scripts/
          copy_from: true

      - name: Wait server reboot if necessary
        run: |
          cd ~/scripts

          [[ $(cat .install_docker) == "true"]] && sleep 30s

  deploy:
    runs-on: ubuntu-latest
    needs: install-dependencies
    environment: production
    steps:
      - name: Get source code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Docker BuildX
        uses: docker/setup-buildx-action@v1

      - name: Make the new image tag
        shell: bash
        run: echo "NEW_IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: production/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USER }}/todo:latest
            ${{ secrets.DOCKERHUB_USER }}/todo:${{ env.NEW_IMAGE_TAG }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USER }}/todo:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USER }}/todo:buildcache,mode=max

      - name: Create nginx config files
        shell: bash
        env:
          SERVER_NAME: ${{ secrets.SSL_CERTIFICATE_ADDRESS }}
        run: |
          cd production/nginx/conf.d
          envsubst < http.conf.template > http.conf
          envsubst < https.conf.template > https.conf.disabled
          rm http.conf.template https.conf.template

      - name: Create config files
        shell: bash
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          API_URL: ${{ secrets.API_URL }}

          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_DB: ${{ secrets.DB_DB }}

          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USER: ${{ secrets.MAIL_USER }}
          MAIL_PASS: ${{ secrets.MAIL_PASS }}

        run: |
          cd production
          envsubst < .env.template > .env
          envsubst < ormconfig.template.json > ormconfig.json
          rm .env.template ormconfig.template.json

      - name: Copy production folder
        uses: ./.github/actions/rsync
        with:
          user: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_KEY }}
          source: production
          destination: ~/todo/

      - name: Setup remote container
        uses: ./.github/actions/ssh
        with:
          user: ${{ secrets.SSH_USER }}
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_KEY }}
          commands: |
            cd todo/production

            # update the containers
            docker-compose down
            docker pull ${{ secrets.DOCKERHUB_USER }}/todo:latest
            docker-compose up -d

            # run migrations
            docker exec todo-app node node_modules/.bin/typeorm migration:run

            # install ssl certificate if necessary
            scripts/install-ssl-certificate.sh ${{ secrets.SSL_CERTIFICATE_ADDRESS }} ${{ secrets.SSL_CERTIFICATE_EMAIL }}

            # remove all unused images
            docker image prune -af
